# -*- coding: utf-8 -*-import arcpy, osclass Toolbox:    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Toolbox"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [Tool]class Tool:    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Import and Geolocate 3D Models"        self.description = ""    def getParameterInfo(self):        """Define the tool parameters."""        param0 = arcpy.Parameter(            displayName="OBJ File",            name="OBJ",            datatype="DEFile",            parameterType="Required",            direction="Input",)        param0.filter.list = ["obj"]        param1 = arcpy.Parameter(            displayName="Output 3D Multipatch Feature",            name="output_feature",            datatype="GPFeatureLayer",            parameterType="Required",            direction="Output",)        param1.filter.list = ["Multipatch"]        param2 = arcpy.Parameter(            displayName="Spatial Reference System",            name="CS",            datatype="GPSpatialReference",            parameterType="Required",            direction="Input",)        param2.value = 32632        param3 = arcpy.Parameter(            displayName="Shift X",            name="shift_x",            datatype="GPDouble",            parameterType="Required",            direction="Input",)        param3.value = 452000        param4 = arcpy.Parameter(            displayName="Shift Y",            name="shift_y",            datatype="GPDouble",            parameterType="Required",            direction="Input",)        param4.value = 4413000        param5 = arcpy.Parameter(            displayName="Output Scene Layer Package",            name="slpk_output",            datatype="DEFile",            parameterType="Required",            direction="Output",)        param5.filter.list = ["slpk"]                params = [param0, param1, param2, param3, param4, param5]        return params    def isLicensed(self):        """Set whether the tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter. This method is called after internal validation."""        input_feature = parameters[1].valueAsText        if input_feature:            if ".gdb" not in input_feature:                parameters[1].setErrorMessage(                    "The input feature layer must be stored in a geodatabase."                )            else:                parameters[1].clearMessage()  # Clear message if valid        return    def execute(self, parameters, messages):        """The source code of the tool."""        OBJ_file = parameters[0].valueAsText        output_feature_class = parameters[1].valueAsText        CS = parameters[2].valueAsText        shift_x = parameters[3].value        shift_y = parameters[4].value        output_scene = parameters[5].valueAsText                arcpy.env.addOutputsToMap = True        arcpy.env.overwriteOutput = True        arcpy.Import3DFiles_3d(            OBJ_file,            output_feature_class,            False,            CS        )        arcpy.AddMessage("Multipatch {0} created successfully.".format(output_feature_class))        mp = output_feature_class        with arcpy.da.UpdateCursor(mp, ["SHAPE@", "OID@"]) as cursor:            for row in cursor:                # Get the current geometry                geometry = row[0]                new_geom = geometry.move(shift_x, shift_y, 0)                row[0] = new_geom                cursor.updateRow(row)        arcpy.RefreshLayer(mp)        arcpy.Delete_management("feature_layer")        arcpy.management.MakeFeatureLayer(output_feature_class, "feature_layer")        arcpy.management.Create3DObjectSceneLayerPackage("feature_layer", output_scene, CS)        arcpy.AddMessage("Scene Layer Package {0} created successfully.".format(output_scene))        return        def postExecute(self, parameters):            """This method takes place after outputs are processed and            added to the display."""            return